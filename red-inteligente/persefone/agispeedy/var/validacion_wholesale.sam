use DBI;
use DBI qw(:sql_types);

$dbh = null;
$dba = null;

sub validacion_wholesale {
   my $self = shift;
   my $server_prop = $self->{server};
   my $agi = $server_prop->{agi};
   my $params = $agi->{params};
   $dbh = $self->{server}{dbh};
   $dba = $self->{server}{dba};

   my $agent = $params->{'agent'};

   $dbh->do("use HOST"); 
   $dba->do("use $agent"); 

   # Parametros de Inicializacion
   my $switchNumber = $params->{'switchNumber'};
   my $channelNumberIn = $params->{'channelNumberIn'};
   my $channelIn = $params->{'channelIn'};
   if ($channelIn =~ m/DAHDI\/(\d+)\-/) {
       $channelNumberIn = $1;
   }
   $agi->set_variable('channelNumberIn',$channelNumberIn);
   my $did = $params->{'did'};
   my $cli = $params->{'cli'};
   my $custom = $params->{'custom'};
   my $trunkName = $params->{'trunkName'};
   $inUseSiteName = "AMP";
   $tariffKind = "C";
   $deviceAddressKind = "P";

   # Lanzando el Store Procedure 1 ----------------------
   $self->log(2, "MRM: numberingPlan $numberingPlan -- numberType $numberType -- callingPartyCategory $callingPartyCategory");
   $self->log(2, "MRM: switchNumber $switchNumber -- channelNumberIn $channelNumberIn -- did $did -- cli $cli");

   my $sth = $dbh->prepare("exec NS_H_GET_INCALL_INF_CACHED_100 ?, ?, ?, ?, ?, ?, ?, ?");
   $sth->bind_param(1, $switchNumber, SQL_INTEGER);
   $sth->bind_param(2, $channelNumberIn, SQL_INTEGER);
   $sth->bind_param(3, $did, SQL_CHAR);
   $sth->bind_param(4, $cli, SQL_CHAR);
   $sth->bind_param(5, $numberingPlan, SQL_INTEGER);
   $sth->bind_param(6, $numberType, SQL_INTEGER);
   $sth->bind_param(7, $trunkName, SQL_CHAR);
   $sth->bind_param(8, $callingPartyCategory, SQL_INTEGER);
   $sth->execute;

   # Salida del Store Procedure
   $data = $sth->fetch;
  
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: cli $cli");
   $cliKind = $data->[45];
   $agi->set_variable('cliKind',$cliKind);
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: cliKind $cliKind");
   $cliAfterRules = $data->[2];
   $translationName = $data->[3];
   $numberingPlanBeforeRules = $data->[4];
   $numberTypeBeforeRules = $data->[5];
   $prefix = $data->[6];
   $nbToRemove = $data->[7];
   $prefixToAdd = $data->[8];
   $numberingPlanAfterRules = $data->[9];
   $numberTypeAfterRules = $data->[10];
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100:numberingPlanAfterRules  $numberingPlanAfterRules");
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100:numberTypeAfterRules  $numberTypeAfterRules");
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100:numberingPlanBeforeRules  $numberingPlanBeforeRules");
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100:numberTypeBeforeRules  $numberTypeBeforeRules");
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: prefix $prefix");
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: nbToRemove $nbToRemove ");
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: prefixToAdd $prefixToAdd ");
   $didContent = $data->[15];
   $agi->set_variable('CDR(didContent)',$didContent);
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: didContent $didContent ");
   #calledPhoneNb: Es el prefijo DID en HOST
   $calledPhoneNb = $data->[16];
   $agi->set_variable('CDR(calledPhoneNb)',$calledPhoneNb);
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: calledPhoneNb $calledPhoneNb ");
   $selfProvisionningService = $data->[17];
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: selfProvisionningService $selfProvisionningService ");
   $serviceName = $data->[18];
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: serviceName $serviceName ");
   $initialAccesType = $data->[19];
   $agi->set_variable('initialAccesType',$initialAccesType);
   $destNbTranslation = $data->[25];
   $agi->set_variable('destNbTranslation',$destNbTranslation);
   $accountIdMode = $data->[29];
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: accountIdMode $accountIdMode ");
   $agi->set_variable('CDR(accountIdMode)',$accountIdMode);

   $familyName = $data->[30];
   $agi->set_variable('CDR(familyName)',$familyName);
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: familyName $familyName ");
   
   $singleAccProductName = $data->[31];
   $singleAccBatchNumber = $data->[32];
   $singleAccountSerialNumber = $data->[33];
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: singleAccProductName $singleAccProductName ");

   $ChargeMode = $data->[40];
   $accountIdFamilyName = $data->[30];
   $actionOnErrorWhenOnHook = $data->[23];
   $serviceName = $data->[18];
   $status = $data->[14];
   $svr_name = $data->[38];

   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: pphone_prefixToAddToDestNb $data->[46]");
   $self->log(2, "NS_H_GET_INCALL_INF_CACHED_100: pphonegroup_stepForPrefixToAddToDestNb $data->[47]");

   $errorCode = $data->[0];
   $comment = $data->[1];

   if($errorCode eq "OK"){
      $self->log(2, "Paso la etapa 1");

      $fp_pt_cliKind ="";
      $isMultiCliRequired =1;

      my $sth = $dba->prepare("exec NS_N_GET_MULTI_CLI_ZONE_CLI_109 ?,?,?,?,?,?");
      $sth->bind_param(1, $fp_pt_cliKind, SQL_CHAR);
      $self->log(2, "fp_pt_cliKind $fp_pt_cliKind");
      $sth->bind_param(2, $cli, SQL_CHAR);
      $self->log(2, "cli $cli");
      $sth->bind_param(3, $cliAfterRules, SQL_CHAR);
      $self->log(2, "cliAfterRules $cliAfterRules");
      $sth->bind_param(4, $initialAccesType, SQL_CHAR);
      $self->log(2, "initialAccesType $initialAccesType");
      $sth->bind_param(5, $familyName, SQL_CHAR);
      $self->log(2, "familyName $familyName");
      $sth->bind_param(6, $isMultiCliRequired, SQL_INTEGER);

      $sth->execute;
    
      $data = $sth->fetch;
	
      $nbOfMultiCli = $data->[2];
      $self->log(2, "nbOfMultiCli $nbOfMultiCli");
      $muc_cli = $data->[3];
      $self->log(2, "muc_cli $muc_cli");
      $muc_productName = $data->[4];
      $self->log(2, "productName $muc_productName");
      $muc_batchNumber = $data->[5];
      $self->log(2, "batchNumber $muc_batchNumber");
      $muc_serialNumber = $data->[6];
      $self->log(2, "serialNumber $muc_serialNumber");
      $muc_cliUserPin = $data->[7];
      $zone_accessType = $data->[9];
      $self->log(2, "zone_accessType $zone_accessType");
      $zone_isItPNB = $data->[10];
      $zone_prefix = $data->[11];
      $zone_modifiedAccessType = $data->[12];
      $self->log(2, "zone_modifiedAccessType $zone_modifiedAccessType");
      $zone_zoneCli = $data->[13];
      $self->log(2, "zone_zoneCli $zone_zoneCli");
      $zone_cliStatus = $data->[14];
      $zone_timeOfLastPinFailure = $data->[15];
      $zone_timeOfRecentPinFailure = $data->[16];
      $errorCode = $data->[0];
      $comment = $data->[1];
      $is_multicli = $data->[2];

      $self->log(2, "NS_N_GET_MULTI_CLI_ZONE_CLI_109: errorCode $errorCode");
      $self->log(2, "NS_N_GET_MULTI_CLI_ZONE_CLI_109: comment $comment");

      #ANALISIS DE LISTA NEGRA Y CONTROL DE ACCESOS: FAMILY "ACL"
      #BLOCKED equivale a un access_type AT0
      if ($familyName eq "ACL") {
         $custom = "${custom}=1";
         $self->log(2, "custom $custom");
         if ($errorCode eq "OK") {
             if ($zone_zoneCli) {
                 if (index($zone_zoneCli,$custom) != -1) {
                     $errorCode = 'ZONE_CLI_NOT_FOUND';
                 }
             }
         }
         $agi->set_variable('errorCode',$errorCode);
         return($errorCode);
      }

      if ($errorCode eq "ZONE_CLI_NOT_FOUND") {
         $zone_modifiedAccessType = 'Regular'; 
      }

      #Obtener datos de la cuenta
      if($errorCode eq "OK" || $errorCode eq "ZONE_CLI_NOT_FOUND"){
         $sth = "";
         $fp_usePPSessionTable = 0;

         if ($accountIdMode eq "P") {
            $accountPin = $params->{'accountPin'};
            $sth = $dba->prepare("exec NS_N_GET_ACC_BY_FAMILY_PIN_CACHED_105 ?,?,?,?,?,?");
            $sth->bind_param(1, $switchNumber, SQL_INTEGER);
            $sth->bind_param(2, $channelNumberIn, SQL_INTEGER);
            $sth->bind_param(3, $familyName, SQL_CHAR);
            $sth->bind_param(4, $accountPin, SQL_CHAR);
            $sth->bind_param(5, $inUseSiteName, SQL_CHAR);
            $sth->bind_param(6, $fp_usePPSessionTable, SQL_INTEGER);
            
            $self->log(2, "switchNumber $switchNumber");
            $self->log(2, "channelNumberIn $channelNumberIn");
            $self->log(2, "familyName $familyName");
            $self->log(2, "accountPin $accountPin");
            $self->log(2, "inUseSiteName $inUseSiteName");
            $sth->execute;
            $data = $sth->fetch;
            $errorCode = $data->[0];
            $self->log(2, "NS_N_GET_ACC_BY_FAMILY_PIN_CACHED_105: errorCode $errorCode");
         }
         else {
            if ($accountIdMode eq "O") {
               $muc_productName = $singleAccProductName;
               $muc_batchNumber = $singleAccBatchNumber;
               $muc_serialNumber = $singleAccountSerialNumber;
            }
            $sth = $dba->prepare("exec NS_N_GET_ACC_BY_SERIAL_157 ?,?,?,?,?,?,?,?,?");
            $sth->bind_param(1, $switchNumber, SQL_INTEGER);
            $sth->bind_param(2, $channelNumberIn, SQL_INTEGER);
            $sth->bind_param(3, $muc_productName, SQL_CHAR);
            $sth->bind_param(4, $muc_batchNumber, SQL_INTEGER);
            $sth->bind_param(5, $muc_serialNumber, SQL_INTEGER);
            $sth->bind_param(6, $inUseSiteName, SQL_CHAR);
            $sth->bind_param(7, $tariffKind, SQL_CHAR);
            $sth->bind_param(8, $zone_modifiedAccessType, SQL_CHAR);
            $sth->bind_param(9, $fp_usePPSessionTable, SQL_INTEGER);
            
            $self->log(2, "switchNumber $switchNumber");
            $self->log(2, "channelNumberIn $channelNumberIn");
            $self->log(2, "productName $muc_productName");
            $self->log(2, "batchNumber $muc_batchNumber");
            $self->log(2, "serialNumber $muc_serialNumber");
            $self->log(2, "inUseSiteName $inUseSiteName");
            $self->log(2, "tariffKind $tariffKind");
            $self->log(2, "zone_modifiedAccessType $zone_modifiedAccessType");
            $self->log(2, "fp_usePPSessionTable $fp_usePPSessionTable");
            $sth->execute;
            $data = $sth->fetch;
            $errorCode = $data->[0];
            $self->log(2, "NS_N_GET_ACC_BY_SERIAL_157: errorCode $errorCode");
         }
            
         ###if ($errorCode eq "OK") {
         if ($errorCode eq "OK" || $errorCode eq "ACCOUNT_IN_USE") {
            $errorCode = $data->[0];
            $comment = $data->[1];
            $acc_acid_productName = $data->[2];
            $agi->set_variable('acc_acidproductName',$data->[2]);
            $acc_acid_batchNumber =$data->[3];
            $agi->set_variable('acc_acid_batchNumber',$data->[3]);
            $acc_acid_serialNumber = $data->[4];
            $agi->set_variable('acc_acid_serialNumber',$data->[4]);
            $acc_familyName = $data->[5];
            $acc_pin = $data->[6];
            $acc_destNbKind = $data->[7];
            $acc_user_pin = $data->[8];
            $acc_state = $data->[9];
            $acc_iloc_switchNumber = $data->[10];
            $acc_iloc_channelNumber = $data->[11];
            $acc_firstUsageDate = $data->[12];
            $acc_endDate = $data->[13];
            $acc_redialNumber = $data->[14];
            $acc_countOfSuccessfulCalls = $data->[15];
            $acc_countOfBadAttempt = $data->[16];
            $acc_lastUsageDate = $data->[17];
            $acc_lastAdminFeeDate = $data->[18];
            $acc_finf_prep_RemainCredit = $data->[19];
            $acc_finf_prep_TotalPurchased = $data->[20];
            $acc_finf_all_monthlyLimit = $data->[21];
            $acc_finf_all_curMonthlyConsumption = $data->[22];
            $acc_finf_all_curMonth = $data->[23];

            my (undef, undef, undef, $day, $month, $year) = localtime();
            $year +=1900;
            $month +=1;
            $curMonth = $acc_finf_all_curMonth;
            
            if ($accountIdMode eq "P") {
               $self->log(2, "acc_finf_prep_TotalPurchased $acc_finf_prep_TotalPurchased");
               $self->log(2, "acc_finf_prep_RemainCredit $acc_finf_prep_RemainCredit");
               $saldo_disponible = $acc_finf_prep_RemainCredit;
            }
            else {
	       ## Innovate - Mon Sep 30 20:59:32 PET 2013
  	       ## Cambio para no actualizar la columna finf_all_curMonthlyConsumption en 0.00 en la tabla dbo.account

               ##if ($curMonth != $month) {
               ##   $saldo_disponible = $acc_finf_all_monthlyLimit;
               ##   $curMonth = $month;
               ##   $dba->do("UPDATE dbo.account SET finf_all_curMonthlyConsumption=0.00000000,finf_all_curMonth=$month WHERE acid_productName='$acc_acid_productName' and acid_batchNumber=$acc_acid_batchNumber and acid_serialNumber=$acc_acid_serialNumber");
               ##   $self->log(2, "UPDATE dbo.account SET finf_all_curMonthlyConsumption=0.00000000,finf_all_curMonth=$month WHERE acid_productName='$acc_acid_productName' and acid_batchNumber=$acc_acid_batchNumber and acid_serialNumber=$acc_acid_serialNumber");
               ##}
               ##else {
               ##   $saldo_disponible = $acc_finf_all_monthlyLimit - $acc_finf_all_curMonthlyConsumption;
               ##}
            
               $saldo_disponible = $acc_finf_all_monthlyLimit - $acc_finf_all_curMonthlyConsumption;
            }
            $self->log(2, "saldo_disponible $saldo_disponible");

            $agi->set_variable('CDR(monthlyLimit)',$acc_finf_all_monthlyLimit);
            $agi->set_variable('CDR(curMonthlyConsumption)',$acc_finf_all_curMonthlyConsumption);
            $agi->set_variable('CDR(curMonth)',$curMonth);
            $agi->set_variable('CDR(saldo_disponible)',$saldo_disponible);

            $acc_finf_all_totalConsumption = $data->[24];
            $acc_inUseSiteName = $data->[34];
            $self->log(2, "acc_acid_productName $acc_acid_productName");
            $self->log(2, "acc_acid_batchNumber $acc_acid_batchNumber");
            $self->log(2, "acc_acid_serialNumber $acc_acid_serialNumber");
            $self->log(2, "acc_pin $acc_pin");
            $self->log(2, "acc_destNbKind $acc_destNbKind");

            if ($accountIdMode eq "P") {
               #$fam_familyName = $data->[37]; 
               #$self->log(2, "NS_N_GET_ACC_BY_FAMILY_PIN_CACHED_105: fam_familyName $fam_familyName");
               $bpty_billMode = $data->[55];
               $agi->set_variable('bpty_billMode',$bpty_billMode);
               $agi->set_variable('zone_modifiedAccessType',$zone_modifiedAccessType);
               $self->log(2, "NS_N_GET_ACC_BY_FAMILY_PIN_CACHED_105: bpty_billMode $bpty_billMode");

               ###TARIFF CLASS NAME: Pendiente de ver de donde se obtiene
               $tcl_tclassName = 'TC';
               $agi->set_variable('tcl_tclassName',$tcl_tclassName);
               $self->log(2, "tcl_tclassName $tcl_tclassName");
               $rtcl_routeClass = 'RC';
               $agi->set_variable('rtcl_routeClass',$rtcl_routeClass);
               $fam_agent_id = 7;
               $agi->set_variable('fam_agent_id',$fam_agent_id);
               $self->log(2, "fam_agent_id $fam_agent_id");
               $tcl_currencyName = 'SOL';
               $agi->set_variable('tcl_currencyName',$tcl_currencyName);
               ###TARIFF CLASS NAME: Seteado manualmente

               $self->log(2, "NS_N_GET_ACC_BY_FAMILY_PIN_CACHED_105: errorCode : $errorCode, comment: $comment");
 
               my $sth = $dbh->prepare("exec NS_H_SET_INUSE_CHA_109 ?,?,?,?,?,?,?,?,?,?,?");
               $sth->bind_param(1, $switchNumber, SQL_INTEGER);
               $sth->bind_param(2, $channelNumberIn, SQL_INTEGER);
               $sth->bind_param(3, $familyName, SQL_CHAR);
               $sth->bind_param(4, $acc_acid_productName, SQL_CHAR);
               $sth->bind_param(5, $acc_acid_batchNumber, SQL_CHAR);
               $sth->bind_param(6, $acc_acid_serialNumber, SQL_CHAR);
               $sth->bind_param(10, $deviceAddressKind, SQL_CHAR);
               $sth->execute;
               $data = $sth->fetch;

               $errorCode = $data->[0];
               $comment = $data->[1];
               $self->log(2, "NS_H_SET_INUSE_CHA_109: errorCode : $errorCode, comment: $comment");

            }
            else {
               #$fam_familyName = $data->[35]; 
               #$self->log(2, "NS_N_GET_ACC_BY_SERIAL_157: fam_familyName $fam_familyName");

               $fam_agent_id = $data->[36];
               $agi->set_variable('fam_agent_id',$fam_agent_id);
               $self->log(2, "NS_N_GET_ACC_BY_SERIAL_157: fam_agent_id $fam_agent_id");

               $bpty_billMode = $data->[85];
               $agi->set_variable('bpty_billMode',$bpty_billMode);
               $self->log(2, "NS_N_GET_ACC_BY_SERIAL_157: bpty_billMode $bpty_billMode");

               $rtcl_routeClass = $data->[145];
               $tcl_tclassName = $data->[147];
               $timePeriodClassName = $data->[148];

               $tcl_currencyName = $data->[149];
               $agi->set_variable('tcl_currencyName',$tcl_currencyName);

               $tcl_admFee_frequency = $data->[150];
            
               $self->log(2, "tcl_tclassName $tcl_tclassName");
               $self->log(2, "timePeriodClassName $timePeriodClassName");
               $self->log(2, "tcl_currencyName $tcl_currencyName");
               $self->log(2, "tcl_admFee_frequency $tcl_admFee_frequency");
       
               $agi->set_variable('rtcl_routeClass',$rtcl_routeClass);
               $agi->set_variable('tcl_tclassName',$tcl_tclassName);
               $agi->set_variable('timePeriodClassName',$timePeriodClassName);
               $agi->set_variable('zone_modifiedAccessType',$zone_modifiedAccessType);

               $self->log(2, "NS_N_GET_ACC_BY_SERIAL_157: errorCode : $errorCode, comment: $comment");
            }
            $agi->set_variable('is_multicli',$is_multicli);
            $agi->set_variable('acid_productName',$acc_acid_productName);
            $agi->set_variable('acid_batchNumber',$acc_acid_batchNumber);
            $agi->set_variable('acid_serialNumber',$acc_acid_serialNumber);
         }
      }
   }
   $agi->set_variable('errorCode',$errorCode);
   return($errorCode);
}
